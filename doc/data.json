{
    "project": {
        "name": "tsproc",
        "description": "Node.js module for data exploration",
        "version": "0.0.1",
        "url": "http://www.maya-technologies.com/en/",
        "themedir": "/usr/local/lib/node_modules/yuidocjs/themes/maya"
    },
    "files": {
        "lib/tsinterp.js": {
            "name": "lib/tsinterp.js",
            "modules": {
                "tsproc": 1
            },
            "classes": {
                "tsinterp": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/tsproc.js": {
            "name": "lib/tsproc.js",
            "modules": {},
            "classes": {
                "tsproc": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/tsreductions.js": {
            "name": "lib/tsreductions.js",
            "modules": {},
            "classes": {
                "tsreductions": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "tsproc": {
            "name": "tsproc",
            "submodules": {},
            "elements": {},
            "classes": {
                "tsinterp": 1,
                "tsproc": 1,
                "tsreductions": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/tsreductions.js",
            "line": 5
        }
    },
    "classes": {
        "tsinterp": {
            "name": "tsinterp",
            "shortname": "tsinterp",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tsproc",
            "namespace": "",
            "file": "lib/tsinterp.js",
            "line": 16,
            "description": "A class that fills the missing\ndocuments in the timeseries by interpolation.\n\nTwo public methods:<br/>\n- a constructor <a href=\"#methods_tsinterp\">tsinterp()</a> that learns all the  documents of a timeseries <br/>\n- a method <a href=\"#methods_smooth\">smooth()</a> that takes as parameter a date\n(string with ISO format) and returns associated document with\ninterpolated values\n\nCompletely independent from <b>tsproc</b> module, so should be used as a normal Node.js module.\n\nBased on the <a href='https://github.com/osuushi/Smooth.js/'>Smooth.js</a>.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "timeseries",
                    "description": "A timeseries to learn. An array of JSONs",
                    "type": "Array"
                },
                {
                    "name": "description",
                    "description": "A description of fields and timestamps (with their format) of the each timeseries",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "An error callback",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsinterp = require('./tsinterp');\n\n    var ts = [{ year: '1919-01-01T00:00:00.000Z', flows_funder: 1 }, { year: '1921-01-01T00:00:00.000Z', flows_funder: 3 }];\n    var config = {fields: [{name: 'flows_funder'}], type: 0, timestamp_field: 'year'};\n\n    var smoother = new tsinterp(ts, config, null);"
            ]
        },
        "tsproc": {
            "name": "tsproc",
            "shortname": "tsproc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tsproc",
            "namespace": "",
            "file": "lib/tsproc.js",
            "line": 53,
            "description": "TimeSeries Processor (tsproc) is a module that \ntakes in one or multiple timeseries whis\ntheir configuration (cf <a href=\"#methods_tsproc\">constructor</a>) and offers\ndifferent public methods to process and explore\nthe timeseries.<br/>\nThe main public methods are:\n- <a href=\"#methods_cut\">cut()</a>: cutting the range of documents\n- <a href=\"#methods_interpolate\">interpolate()</a>: interpolation of missing documents\n- <a href=\"#methods_intersect\">intersect()</a>: leaving the intersected documents between the timeseries\n- <a href=\"#methods_merge\">merge()</a>: merging multiple timeseries into one\n- <a href=\"#methods_renameField\">renameField()</a>: renaming a field in all documents\n- <a href=\"#methods_checkSimilarity\">checkSimilarity()</a>: similarity check between timeseries\n- <a href=\"#methods_toISO\">toISO()</a>: passing the timestamp to the ISO format\n- <a href=\"#methods_undersample\">undersample()</a>: timeseries size reduction\n- <a href=\"#methods_process\">process()</a>: a combination of all the previous methods\n\nAll of the sited methods are changing the state of the timeseries \n(which is irreversible) and all of them are using a callback function\nin order to pass erros and return modified timeseries.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "timeseries",
                    "description": "An array of timeseries. Each one should be sorted",
                    "type": "Array"
                },
                {
                    "name": "config",
                    "description": "A description of each timeseries (cf example)",
                    "type": "Json"
                },
                {
                    "name": "err_callback",
                    "description": "Error callback",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {\n    \t\t\"transform\":{\"type\":\"interp\",\"interp_type\":\"linear\"},\n\n    \t\t\"reduction\":{\"type\":\"skip\",\"size\":1,\"target_field\":\"\"},\n\n    \t\t\"date_borders\":{\"from\":{\"date\":\"\"},\"to\":{\"date\":\"\"}},\n\n    \t\t\"correlation\":{\"count_negative\":false,\"max_coef\":true},\n\n    \t\t\"timeseries\":\n\t    \t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\"fields\":\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\"name\":\"a\"}\n\t\t\t\t\t\t],\n\n\t\t\t\t\t\"timestamp\":{\"name\":\"year\",\"format\":\"YYYY\"}\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\"fields\":\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\"name\":\"b\"}\n\t\t\t\t\t\t],\t\n\n\t\t\t\t\t\"timestamp\":{\"name\":\"year\",\"format\":\"YYYY\"}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t};\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 21.07, year:'2013'}]\n         ]\n    \n    var tsp = new tsproc(ts, config, null);"
            ]
        },
        "tsreductions": {
            "name": "tsreductions",
            "shortname": "tsreductions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tsproc",
            "namespace": "",
            "file": "lib/tsreductions.js",
            "line": 5,
            "description": "Class contaning the size reduction functions\nused by the <b>tsproc</b> class.\n\nThese functions have access to the internal\nmethods of <b>tsproc</b>, so from within the <b>tsproc</b>, they should\nbe called using the <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Function/call\">call(this, ..)</a>\nmethod."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/tsinterp.js",
            "line": 8,
            "itemtype": "property",
            "name": "INTERP_METHODS",
            "type": "array",
            "description": "Description of interpolation methods.\nMethods comparation could be found <a href=\"http://osuushi.github.io/plotdemo016.html\">here</a>.",
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 105,
            "description": "A main public method that takes in the date\nand determines, based on the previously learnt documents,\nthe interpolated document with given date.",
            "itemtype": "method",
            "name": "smooth",
            "params": [
                {
                    "name": "date",
                    "description": "A date from which to interpolate (ISO string)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsinterp = require('./tsinterp');\n\n    var ts = [{ year: '1919-01-01T00:00:00.000Z', flows_funder: 1 }, { year: '1921-01-01T00:00:00.000Z', flows_funder: 3 }];\n    var config = {fields: [{name: 'flows_funder'}], type: 0, timestamp_field: 'year'}; // 0 - linear interpolation\n    var smoother = new tsinterp(ts, config, null);\n\n    //inside the range\n    smoother.smooth('1920-01-01T00:00:00.000Z', function(err, doc){\n\n    \tif (doc) console.log(doc); //{ year: '1920-01-01T00:00:00.000Z', flows_funder: 1.998632 }\n    });\n\n    //out of the range\n    smoother.smooth('1923-01-01T00:00:00.000Z', function(err, doc){\n\n    \tif (doc) console.log(doc); //{ year: '1923-01-01T00:00:00.000Z', flows_funder: 0 }\n    });"
            ],
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 205,
            "description": "A private method that generates a json document from\ngiven values.",
            "itemtype": "method",
            "name": "createDoc",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "time",
                    "description": "An ISO string representing the date",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array of values of document fields",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Generated document",
                "type": "Json"
            },
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 231,
            "description": "A private method that exracts an array of dates (moment.js dates) from all the documents\nin a timeseries.",
            "itemtype": "method",
            "name": "extractDates",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An array of moment.js dates",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[{a: 18.01, year:'2011'}, {a: 21.07, year:'2012'}]\n    console.log(extractDates.call(this)); //[2011, 2012]\n"
            ],
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 258,
            "description": "A private method that exracts an array of values of all\nthe documents in a timeseries.",
            "itemtype": "method",
            "name": "extractValues",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An array of values",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[{a: 18.01, year:'2011'}, {a: 21.07, year:'2012'}]\n    console.log(extractValues.call(this)); //[[18.01], [21.07]]"
            ],
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 294,
            "description": "A private method that learns the values\nof each document of the timeseries.",
            "itemtype": "method",
            "name": "learn",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "An error callback",
                    "type": "Function"
                }
            ],
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 10,
            "itemtype": "property",
            "name": "ISO_FORMAT",
            "type": "string",
            "description": "A constant that holds\nthe format of ISO date.",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 20,
            "itemtype": "property",
            "name": "TIMESTAMP_FIELD",
            "type": "string",
            "description": "A constant that holds the name \nof the timestamp field that would be generated \nafter the merge (cf merge() and process() functions).",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 29,
            "itemtype": "property",
            "name": "InterpEnum",
            "type": "json",
            "description": "A description of interpolation\nmethods offered by the <b>tsinterp</b> class.",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 37,
            "itemtype": "property",
            "name": "ReduceEnum",
            "type": "json",
            "description": "A description of timeseries size\nreduction methods offered by the <b>tsreductions</b> class.",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 45,
            "itemtype": "property",
            "name": "ReduceFunc",
            "type": "array",
            "description": "An array of timeseries size\nreduction functions.",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 177,
            "description": "A main public method that processes a set of timeseries. It returns (via <code>callback</code>) a single timeseries with timestamp 'time' with\nISO format.\n\nThe processing takes the next steps:\n- if the borders (min and max dates) are specified in the config file, the timeseries would be cut\n- all the dates would be transformed to the ISO string\n- if there are multiple timeseries, and they are not homogeneous, all the timeseries would be interpolated or intersected (cf <a href=\"#methods_intersect\">intersect()</a> function)\n- if the are multiple timeseries (and after the previous step they are all homogeneous), they would be fused into one timeseries document by document\n- the output timeseries's timestamp field would be called 'time' and it would be an ISO string\n- finally, if the skip value is defined, the timeseries would be undersampled to decrease it's size",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.process(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{time:'2011-01-01T00:00:00.000Z', a: 18.11, b: 0},\n    \t\t//\t{time:'2012-01-01T00:00:00.000Z', a: 21.07, b: 26.42},\n    \t\t//\t{time:'2013-01-01T00:00:00.000Z', a: 0, b: 24.11} \n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 269,
            "description": "Public method that returns (directly or via <code>callback</code>) \na single timeseries if there is only one (if\nit is merged for example),\nor an array of timeseries if trere are many.",
            "itemtype": "method",
            "name": "getTS",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "One or an array of timeseries",
                "type": "Array"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 294,
            "description": "Public method that returns a timeseries config json.",
            "itemtype": "method",
            "name": "getConfig",
            "return": {
                "description": "Timeseries description",
                "type": "Json"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 305,
            "description": "Public method that returns the current number of timeseries in \nthe tsproc module.",
            "itemtype": "method",
            "name": "getNbTS",
            "return": {
                "description": "Number of timeseries available",
                "type": "Int"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 317,
            "description": "Public method that returns the number of documents in specified timeseries.\nIf there is no timeseries specified, returns the size of the first one.",
            "itemtype": "method",
            "name": "getTSSize",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The timeseries index",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Size of the timeseries",
                "type": "Int"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 333,
            "description": "Public method that returns the timestamp value (moment.js) of a specified document.",
            "itemtype": "method",
            "name": "getTimestamp",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "doc_index",
                    "description": "The index of the document in the timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "A moment.js date",
                "type": "Moment"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 354,
            "description": "Public method that returns the name of timestamp field of specified timeseries.",
            "itemtype": "method",
            "name": "getTimestampField",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "A timestamp field name",
                "type": "String"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 366,
            "description": "Public method that returns a format of timestamp field of specified timeseries.",
            "itemtype": "method",
            "name": "getTimestampFormat",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "A timestamp format",
                "type": "String"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 378,
            "description": "Public method that returns a single document from the timeseries.",
            "itemtype": "method",
            "name": "getDoc",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "doc_index",
                    "description": "The index of the document in the timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Requested document",
                "type": "Json"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 391,
            "description": "Public method that returns an empty document.\nIt is generated from a normal document (specified\nby <code>ts_index</code> and <code>doc_index</code>) by emptying all the fields\nexcept the timestamp.\n\nUsed by <b>tsreductions</b> class.",
            "itemtype": "method",
            "name": "getEmptyDoc",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "doc_index",
                    "description": "The index of the document in the timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "A document with empty fields except the timestamp",
                "type": "String"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 419,
            "description": "Public method that takes a timestamp and returns (via <code>callback</code>) \na document from the timeseries that corresponds to it.",
            "itemtype": "method",
            "name": "getDocByTimestamp",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "timestamp",
                    "description": "A string with date in ISO format",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 461,
            "description": "Public method that returns an array of fields present \nin the specified timeseries (ie in each of it's documents).",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "An array of field names",
                "type": "Array"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 482,
            "description": "Public method that returns an average number of timestamps per day.\nThe timeseries should be merged.",
            "itemtype": "method",
            "name": "getAvgPerDay",
            "return": {
                "description": "An average number of timestamps per day",
                "type": "Float"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 511,
            "description": "Public method that returns the date borders, which corresponds\nto the earliest timestamp from all the timseries and the oldest timestamp \nfrom all the timeseries.",
            "itemtype": "method",
            "name": "getBorders",
            "return": {
                "description": "An array with date (string with ISO format) borders",
                "type": "Array"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 527,
            "description": "Public method that verifies wheather the timeseries is homogeneous.\n\nIf there is only one timeseries, it is considered homogeneous.\nIf there are many, they are considered homogeneous if every timeseries\nhas the same timestamps at same positions.",
            "itemtype": "method",
            "name": "isHomogeneous",
            "return": {
                "description": "Wheather a set of timeseries is homogeneous",
                "type": "Boolean"
            },
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    //homogeneous timeseries\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 0.24, year:'2014'}],\n   \t\t    [{b: 21.42, year:'2012'}, {b: 23.11, year:'2013'}, {b: 0.11, year:'2014'}]\n         ];\n    var tsp = new tsproc(ts, config, null);\n    console.log(tsp.isHomogeneous()); //true\n\n    //non homogeneous timeseries\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 0.24, year:'2014'}],\n   \t\t    [{b: 21.42, year:'2012'}, {b: 23.11, year:'2013'}, {b: 0.11, year:'2014'}]\n         ];\n    var tsp = new tsproc(ts, config, null);\n    console.log(tsp.isHomogeneous()); //false"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 600,
            "description": "Public method that checks wheather the format of the timestamps in each\ntimeseries is correct.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "Wheather the date format is correct",
                "type": "Boolean"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 626,
            "description": "Public method that renames a field in the specified timeseries.",
            "itemtype": "method",
            "name": "renameField",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of a timeseries",
                    "type": "Int"
                },
                {
                    "name": "field_name",
                    "description": "A field to rename",
                    "type": "String"
                },
                {
                    "name": "new_name",
                    "description": "A new field name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.renameField(0, 'a', 'new_a', function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{new_a: 18.11, year: '2011'},\n   \t\t\t//\t\t{new_a: 21.07, year: '2012'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012'},\n   \t\t\t//\t\t{b: 24.11, year: '2013'}\n    \t\t//  ]\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 688,
            "description": "Public method that checks wheather the timestamps have ISO format.\nThe method checks only the config json, it does not verify the timestamps\nof all the documents.",
            "itemtype": "method",
            "name": "isISO",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Wheather the timestamps have the ISO format",
                "type": "Boolean"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 746,
            "description": "Public method that passes all the timestamps \nto the ISO format (YYYY-MM-DDTHH:mm:ss.SSSSZ).\nThe name of the timestamps is not changed.",
            "itemtype": "method",
            "name": "toISO",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.toISO(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{a: 18.11, year: '2011-01-01T00:00:00.000Z'},\n   \t\t\t//\t\t{a: 21.07, year: '2012-01-01T00:00:00.000Z'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012-01-01T00:00:00.000Z'},\n   \t\t\t//\t\t{b: 24.11, year: '2013-01-01T00:00:00.000Z'}\n    \t\t//  ]\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 814,
            "description": "Public method that leaves in the \ntimeseries only the documents between\ntwo dates specified in the <code>date_borders</code> array",
            "itemtype": "method",
            "name": "cut",
            "params": [
                {
                    "name": "date_borders",
                    "description": "An array of two dates \n(ISO strings)",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}, {b: 22.11, year:'2014'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.cut(['2012-01-01T00:00:00.000Z', '2013-01-01T00:00:00.000Z'], function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{a: 21.07, year: '2012-01-01T00:00:00.000Z'},\n   \t\t\t//\t\t{a: 23.23, year: '2013-01-01T00:00:00.000Z'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012-01-01T00:00:00.000Z'},\n   \t\t\t//\t\t{b: 24.11, year: '2013-01-01T00:00:00.000Z'}\n    \t\t//  ]\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 887,
            "description": "Public method that merges two or more timeseries \ninto one timeseries. The timeseries should be homogeneous.\n\nThe result timeseries would have only one timestamp field\n(it's name is specified by TIMESTAMP_FIELD proprety).",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.merge(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n   \t\t\t//\t{a: 21.07, b: 26.42, time: '2012'},\n   \t\t\t//\t{a: 23.23, b: 24.11, time: '2013'}\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 969,
            "description": "Public method that reduces the number\nof documents in the timeseries by different\nmethods. Applied only if the timeseries are homogeneous.\nUses a <b>tsreductions</b> module.\n\nThe reduction mehtods are: \n- skip: choose one document (first) from <code>skipsize</code> documents\n- sum: sum the values of <code>skipsize</code> documents into one\n- avg: average the values of <code>skipsize</code> documents into one\n- max: choose one document from <code>skipsize</code> documents with the maximum value of <code>target_field</code>\n- min: choose one document from <code>skipsize</code> documents with the minimum value of <code>target_field</code>",
            "itemtype": "method",
            "name": "undersample",
            "params": [
                {
                    "name": "type",
                    "description": "An index of ReduceEnum with reduction methods",
                    "type": "Int"
                },
                {
                    "name": "skipsize",
                    "description": "A number of documents to be reduced into one",
                    "type": "Int"
                },
                {
                    "name": "target_field",
                    "description": "A targeted field to calculate the max or min reduction",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 24.24, year:'2014'}, {a: 25.25, year:'2015'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}, {b: 22.11, year:'2014'}, {b: 21.01, year:'2015'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    //simple skip (type = 0)\n    tsp.undersample(0, 2, null, function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{a: 21.07, year: '2012'},\n   \t\t\t//\t\t{a: 24.24, year: '2014'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012'},\n   \t\t\t//\t\t{b: 22.11, year: '2014'}\n    \t\t//  ]\n    \t\t//]\n    });\n\n    //max value of field 'a' (type = 3)\n    tsp.undersample(3, 2, 'a', function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{a: 23.23, year: '2013'},\n   \t\t\t//\t\t{a: 25.25, year: '2015'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012'},\n   \t\t\t//\t\t{b: 22.11, year: '2014'}\n    \t\t//  ]\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1056,
            "description": "Public mehtod that could be applied for two or more timeseries\nto interpolate the missing datapoints (documents) in relation to \neach other.\n\nInterpolation methods are: linear, cubic, lanczos, and neares neighbor.\nMethods comparaison could be found <a href=\"http://osuushi.github.io/plotdemo016.html\">here</a>.\n\nTimestamps should be the ISO strings.\nUses a <b>tsinterp</b> module.",
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "type",
                    "description": "An index of InterpEnum with interpolation methods",
                    "type": "Int"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 24.24, year:'2014'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}, {b: 21.01, year:'2015'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    //pass to iso timestamps\n    tsp.toISO(null);\n\n    //linear interpolation (type = 0)\n    tsp.interpolate(0, function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', a: 21.07},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', a: 23.23},\n   \t\t\t//\t\t{year: '2014-01-01T00:00:00.000Z', a: 24.24},\n   \t\t\t//\t\t{year: '2015-01-01T00:00:00.000Z', a: 0}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', b: 26.42},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', b: 24.11},\n   \t\t\t//\t\t{year: '2014-01-01T00:00:00.000Z', b: 22.560000000000002}\n   \t\t\t//\t\t{year: '2015-01-01T00:00:00.000Z', b: 21.01}\n    \t\t//  ]\n    \t\t//]\n    });\n\n    //cubic interpolation (type = 1)\n    tsp.interpolate(1, function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', a: 21.07},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', a: 23.23},\n   \t\t\t//\t\t{year: '2014-01-01T00:00:00.000Z', a: 24.24},\n   \t\t\t//\t\t{year: '2015-01-01T00:00:00.000Z', a: 0}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', b: 26.42},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', b: 24.11},\n   \t\t\t//\t\t{year: '2014-01-01T00:00:00.000Z', b: 23.72875}\n   \t\t\t//\t\t{year: '2015-01-01T00:00:00.000Z', b: 21.01}\n    \t\t//  ]\n    \t\t//]\n    });\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1199,
            "description": "Public mehtod that could be applied for two or more timeseries\nto simplify them and leave only the documents that have the same\ntimestamps in different timeseries (cf example).\n\nTimestamps should be the ISO strings.",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 24.24, year:'2014'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}, {b: 21.01, year:'2015'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    //pass to iso timestamps\n    tsp.toISO(null);\n\n    tsp.intersect(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', a: 21.07},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', a: 23.23}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', b: 26.42},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', b: 24.11}\n    \t\t//  ]\n    \t\t//]\n    });\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1284,
            "description": "Public method that checks the local similarity\nbetween the fields of a timeseries. Does this by caclulating\nthe local correlation.\n\nTimeseries should be merged (ie the function works only with \na single timeseries) and have at least two non-timestamp fields.\n\nThe similarity is indicated by adding a new field 'correlation' to each document.\nIf value of this field is not 'false', it means that a document is a part \nof a set of documents that are strongly correlated.\nThe correlation is considered strong if correalation coef is > 0.6.\n\nMore info about correlation can be found <a href=\"http://www.statisticshowto.com/what-is-the-correlation-coefficient-formula/\">here</a>.",
            "itemtype": "method",
            "name": "checkSimilarity",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 0.24, year:'2014'}, {a: 25.25, year:'2015'}, {a: 25.25, year:'2016'}, {a: 25.25, year:'2017'}],\n   \t\t    [{b: 21.42, year:'2012'}, {b: 23.11, year:'2013'}, {b: 0.11, year:'2014'}, {b: 21.01, year:'2015'}, {b: 4.5, year:'2016'}, {b: 35.2, year:'2017'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    //we can just merge (without interpolation) the timeseries\n    //because they are homogeneous\n    tsp.merge(null);\n\n    tsp.checkSimilarity(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{a: 21.07, b: 21.42, time: '2012', correlation: 0.9998},\n    \t\t//\t{a: 23.23, b: 23.11, time: '2013', correlation: 0.9998},\n    \t\t//\t{a: 0.24, b: 0.11, time: '2014', correlation: 0.9998},\n    \t\t//\t{a: 25.25, b: 21.01, time: '2015', correlation: false},\n    \t\t//\t{a: 25.25, b: 4.5, time: '2016', correlation: false},\n    \t\t//\t{a: 25.25, b: 35.2, time: '2017', correlation: false} \n    \t\t//]\n    \t\t//\n    \t\t// we can conclude that the first three document are strongly correlated\n    });\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1413,
            "description": "Private method that merges the configuration of \nmultiple timeseries into one.\nThe final timestamp name is defined by the \nTIMESTAMP_FIELD proprety.",
            "itemtype": "method",
            "name": "mergeConfigs",
            "access": "private",
            "tagname": "",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1452,
            "description": "Private method that returns the minimal (the earliest)\ndate of all the timeseries.",
            "itemtype": "method",
            "name": "getMinDate",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "A moment.js date",
                "type": "Moment"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1478,
            "description": "Private method that returns the maximal (the oldest)\ndate of all the timeseries.",
            "itemtype": "method",
            "name": "getMaxDate",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "A moment.js date",
                "type": "Moment"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1504,
            "description": "Private method that cuts in a specified timeseries all the documents\nthat are bellow the specified index.\nIndex is included in a cut.",
            "itemtype": "method",
            "name": "cutBellow",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ts_index",
                    "description": "An index of a timeseries to cut",
                    "type": "Int"
                },
                {
                    "name": "index",
                    "description": "An index bellow which to cut",
                    "type": "Int"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1519,
            "description": "Private method that cuts in a specified timeseries all the documents\nthat are above the specified index.\nIndex is included in a cut.",
            "itemtype": "method",
            "name": "cutAbove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ts_index",
                    "description": "An index of a timeseries to cut",
                    "type": "Int"
                },
                {
                    "name": "index",
                    "description": "An index above which to cut",
                    "type": "Int"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1534,
            "description": "Private method that cuts in all the \ntimeseries the documents that are earlier \nthan <code>max_date</code>.",
            "itemtype": "method",
            "name": "cutAboveMax",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "max_date",
                    "description": "A moment.js date",
                    "type": "Moment"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1589,
            "description": "Private method that cuts in all the \ntimeseries the documents that are older \nthan <code>min_date</code>.",
            "itemtype": "method",
            "name": "cutBellowMin",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "min_date",
                    "description": "A moment.js date",
                    "type": "Moment"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1645,
            "description": "Private method that returns an array\nof all the possible dates of all the timeseries (without duplication).\n\nThe timestamps of all the timeseries shoud be the ISO strings.\nFinal array of dates is sorted chronologically.",
            "itemtype": "method",
            "name": "getAllDates",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An array of all possible dates (ISO strings) in all the timeseries",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[[{a: 18.01, year:'2011-01-01T00:00:00.000Z'}, {a: 21.07, year:'2012-01-01T00:00:00.000Z'}], [{b: 21.42, year:'2012-01-01T00:00:00.000Z'}, {b: 23.11, year:'2013-01-01T00:00:00.000Z'}]]\n    console.log(getAllDates.call(this)); //['2011-01-01T00:00:00.000Z', '2012-01-01T00:00:00.000Z', '2013-01-01T00:00:00.000Z']\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1687,
            "description": "Private method that returns an array\nof dates that are part of all the timeseries.\n\nThe timestamps of all the timeseries shoud be the ISO strings.",
            "itemtype": "method",
            "name": "getSameDates",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An array of dates (ISO strings) that are part of all timeseries",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[[{a: 18.01, year:'2011-01-01T00:00:00.000Z'}, {a: 21.07, year:'2012-01-01T00:00:00.000Z'}], [{b: 21.42, year:'2012-01-01T00:00:00.000Z'}, {b: 23.11, year:'2013-01-01T00:00:00.000Z'}]]\n    console.log(getSameDates.call(this)); //['2012-01-01T00:00:00.000Z']\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1721,
            "description": "Private method that returns an array\nof all the dates present in a specified timeseries.",
            "itemtype": "method",
            "name": "getTSDates",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ts_index",
                    "description": "An index of a timeseries to extract the dates",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "An array of dates from a specific timeseries",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[[{a: 18.01, year:'2011-01-01T00:00:00.000Z'}, {a: 21.07, year:'2012-01-01T00:00:00.000Z'}], [{b: 21.42, year:'2012-01-01T00:00:00.000Z'}, {b: 23.11, year:'2013-01-01T00:00:00.000Z'}]]\n    console.log(getTSDates.call(this, 0)); //['2011-01-01T00:00:00.000Z', '2012-01-01T00:00:00.000Z']\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1750,
            "description": "A private method that exracts an array of values of all\nthe documents in a timeseries.\n\nThe function works only with merged timeseries.",
            "itemtype": "method",
            "name": "extractValues",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "borders",
                    "description": "An array of indexes between which the values should be extracted",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of values",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[{a: 18.01, year:'2011'}, {a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}]\n    console.log(extractValues.call(this)); //[[18.01], [21.07], [23.23]]\n    console.log(extractValues.call(this, [1,2])); //[[21.07], [23.23]]\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1817,
            "description": "A private method that calculates the correlation coefficient\nbetween two arrays of digits. \n\nUsing <a href=\"http://www.statisticshowto.com/what-is-the-correlation-coefficient-formula/\">this</a>\ncorrelation formula.",
            "itemtype": "method",
            "name": "getCorrelationCoef",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "array1",
                    "description": "First array of digits to count the correlation",
                    "type": "Array"
                },
                {
                    "name": "array2",
                    "description": "Second arrya of digits to count the correlation",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A correlation coefficient",
                "type": "Flooat"
            },
            "example": [
                "\n\t\n     console.log(getCorrelationCoef.call(this, [1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60])); //0.69"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1872,
            "description": "A private method that adds to the set of documents \n(specified by the <code>borders</code>) a field 'correlation' with value\n<code>corr_value</code> (cf example).\n\nIf no borders are specified, the field would be added\nto all of the documents of the timeseries.<br/>\nIf no correlation value is specified the 'false' would\nbe attributed.\n\nThe method works only with merged timeseries and only if \nthere are at least 2 non-timestamp fields.",
            "itemtype": "method",
            "name": "markCorrelation",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "borders",
                    "description": "An array of indexes between which the correlation should be marked",
                    "type": "Array"
                },
                {
                    "name": "corr_value",
                    "description": "The correlation value to add",
                    "type": "Float"
                }
            ],
            "example": [
                "\n\t\n    //[{a: 18.01, year:'2011'}, {a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}]\n    markCorrelation.call(this, [1,2], 0.9); console.log(this.getTS()); //[{a: 18.01, year:'2011'}, {a: 21.07, year:'2012', correlation: 0.9}, {a: 23.23, year:'2013', correlation: 0.9}]\n    markCorrelation.call(this); console.log(this.getTS()); //[{a: 18.01, year:'2011', correlation: false}, {a: 21.07, year:'2012', correlation: 0.9}, {a: 23.23, year:'2013', correlation: 0.9}]\n\n    //[{a: 18.01, year:'2011'}, {a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}]\n    markCorrelation.call(this); console.log(this.getTS()); //[{a: 18.01, year:'2011', correlation: false}, {a: 21.07, year:'2012', correlation: false}, {a: 23.23, year:'2013', correlation: false}]"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 18,
            "description": "Reduction of the timeseries size by choosing one document \n(allways the first one) from the set of documents.",
            "itemtype": "method",
            "name": "reduceSkip",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to choose from",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceSkip.call(this, 5); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 52,
            "description": "Reduction of the timeseries size \nby summing the values of all the\nfields in a set of documents.",
            "itemtype": "method",
            "name": "reduceSum",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to\nbe reduced into one by summing",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceSum.call(this, 5); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 104,
            "description": "Reduction of the timeseries size \nby averaging the values of all the\nfields in a set of documents.",
            "itemtype": "method",
            "name": "reduceAvg",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to\nbe reduced into one by averaging",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceAvg.call(this, 5); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 162,
            "description": "Reduction of the timeseries size by finding the document with\nthe max value of <code>target_field</code> between a set of documents.",
            "itemtype": "method",
            "name": "reduceMax",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to be reduced into one by finding the max",
                    "type": "Int"
                },
                {
                    "name": "target_field",
                    "description": "A field by which all the documents are compared\nto calculate the max",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceMax.call(this, 5, 'temp'); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 213,
            "description": "Reduction of the timeseries size by finding the document with\nthe min value of <code>target_field</code> between a set of documents.",
            "itemtype": "method",
            "name": "reduceMin",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to be reduced into one by finding the min",
                    "type": "Int"
                },
                {
                    "name": "target_field",
                    "description": "A field by which all the documents are compared\nto calculate the min",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceMin.call(this, 5, 'temp'); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        }
    ],
    "warnings": []
}