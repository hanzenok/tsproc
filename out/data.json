{
    "project": {
        "name": "tsproc",
        "description": "Node.js module for data exploration",
        "version": "0.0.1",
        "url": "http://www.maya-technologies.com/en/",
        "themedir": "/usr/local/lib/node_modules/yuidocjs/themes/maya"
    },
    "files": {
        "lib/tsinterp.js": {
            "name": "lib/tsinterp.js",
            "modules": {
                "tsproc": 1
            },
            "classes": {
                "tsinterp": 1
            },
            "fors": {
                "tsinterp": 1
            },
            "namespaces": {}
        },
        "lib/tsproc.js": {
            "name": "lib/tsproc.js",
            "modules": {},
            "classes": {
                "tsproc": 1
            },
            "fors": {
                "tsproc": 1
            },
            "namespaces": {}
        },
        "lib/tsreductions.js": {
            "name": "lib/tsreductions.js",
            "modules": {},
            "classes": {
                "tsreductions": 1
            },
            "fors": {
                "tsreductions": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "tsproc": {
            "name": "tsproc",
            "submodules": {},
            "elements": {},
            "classes": {
                "tsinterp": 1,
                "tsproc": 1,
                "tsreductions": 1
            },
            "fors": {
                "tsinterp": 1,
                "tsproc": 1,
                "tsreductions": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "lib/tsreductions.js",
            "line": 5
        }
    },
    "classes": {
        "tsinterp": {
            "name": "tsinterp",
            "shortname": "tsinterp",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tsproc",
            "namespace": "",
            "file": "lib/tsinterp.js",
            "line": 17,
            "description": "A class that fills the missing\ndocuments in the timeseries by interpolation.\n\nTwo public methods:<br/>\na constructor 'tsinterp' that learns all the  documents of a timeseries\nand a method 'smooth' that takes as parameter a date\n(string with ISO format) and returns associated document with\ninterpolated values.\n\nCompletely independent from tsproc module, so should be used as a normal Node.js module.\n\nBased on the <a href='https://github.com/osuushi/Smooth.js/'>Smooth.js</a>\nmodule.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "timeseries",
                    "description": "A timeseries to learn. An array of JSONs",
                    "type": "Array"
                },
                {
                    "name": "description",
                    "description": "A description of fields and timestamps (with their format) of the each timeseries",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "An error callback",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsinterp = require('./tsinterp');\n\n    var ts = [{ year: '1919-01-01T00:00:00.000Z', flows_funder: 1 }, { year: '1921-01-01T00:00:00.000Z', flows_funder: 3 }];\n    var config = {fields: [{name: 'flows_funder'}], type: 0, timestamp_field: 'year'};\n\n    var smoother = new tsinterp(ts, config, null);"
            ]
        },
        "tsproc": {
            "name": "tsproc",
            "shortname": "tsproc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tsproc",
            "namespace": "",
            "file": "lib/tsproc.js",
            "line": 56,
            "description": "Timeseries processor is a class that works\nwith multiple timeseries and offers different methods\nto process and explore them.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "timeseries",
                    "description": "An array of timeseries. Each one should be sorted",
                    "type": "Array"
                },
                {
                    "name": "config",
                    "description": "A description of each timeseries",
                    "type": "Json"
                },
                {
                    "name": "err_callback",
                    "description": "Error callback",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {\n    \t\t\"transform\":{\"type\":\"interp\",\"interp_type\":\"linear\"},\n\n    \t\t\"reduction\":{\"type\":\"skip\",\"size\":1,\"target_field\":\"\"},\n\n    \t\t\"date_borders\":{\"from\":{\"date\":\"\"},\"to\":{\"date\":\"\"}},\n\n    \t\t\"correlation\":{\"count_negative\":false,\"max_coef\":true},\n\n    \t\t\"timeseries\":\n\t    \t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\"fields\":\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\"name\":\"a\"}\n\t\t\t\t\t\t],\n\n\t\t\t\t\t\"timestamp\":{\"name\":\"year\",\"format\":\"YYYY\"}\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\"fields\":\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\"name\":\"b\"}\n\t\t\t\t\t\t],\t\n\n\t\t\t\t\t\"timestamp\":{\"name\":\"year\",\"format\":\"YYYY\"}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t};\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 21.07, year:'2013'}]\n         ]\n    \n    var tsp = new tsproc(ts, config, null);"
            ]
        },
        "tsreductions": {
            "name": "tsreductions",
            "shortname": "tsreductions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "tsproc",
            "namespace": "",
            "file": "lib/tsreductions.js",
            "line": 5,
            "description": "Class contaning the size reduction functions\nused by the tsproc class.\n\nThese functions have access to the internal\nmethods of tsproc, so from within the tsproc, they should\nbe called using the <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Function/call\">call(this, ..)</a>\nmethod."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/tsinterp.js",
            "line": 8,
            "itemtype": "property",
            "name": "INTERP_METHODS",
            "type": "array",
            "description": "Description of interpolation methods.\nMethods comparation could be found <a href=\"http://osuushi.github.io/plotdemo016.html\">here</a>.",
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 108,
            "description": "A main public method that takes in the date\nand determines, based on the previously learnt documents,\nthe interpolated document with given date.",
            "itemtype": "method",
            "name": "smooth",
            "params": [
                {
                    "name": "date",
                    "description": "A date from which to interpolate (ISO string)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsinterp = require('./tsinterp');\n\n    var ts = [{ year: '1919-01-01T00:00:00.000Z', flows_funder: 1 }, { year: '1921-01-01T00:00:00.000Z', flows_funder: 3 }];\n    var config = {fields: [{name: 'flows_funder'}], type: 0, timestamp_field: 'year'}; // 0 - linear interpolation\n    var smoother = new tsinterp(ts, config, null);\n\n    //inside the range\n    smoother.smooth('1920-01-01T00:00:00.000Z', function(err, doc){\n\n    \tif (doc) console.log(doc); //{ year: '1920-01-01T00:00:00.000Z', flows_funder: 1.998632 }\n    });\n\n    //out of the range\n    smoother.smooth('1923-01-01T00:00:00.000Z', function(err, doc){\n\n    \tif (doc) console.log(doc); //{ year: '1923-01-01T00:00:00.000Z', flows_funder: 0 }\n    });"
            ],
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 209,
            "description": "A private method that generates a json document from\ngiven values.",
            "itemtype": "method",
            "name": "createDoc",
            "params": [
                {
                    "name": "time",
                    "description": "An ISO string representing the date",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "An array of values of document fields",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Generated document",
                "type": "Json"
            },
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 235,
            "description": "A private method that exracts an array of dates (moment.js dates) from all the documents\nin a timeseries.",
            "itemtype": "method",
            "name": "extractDates",
            "return": {
                "description": "An array of moment.js dates",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[{a: 18.01, year:'2011'}, {a: 21.07, year:'2012'}]\n    console.log(extractDates.call(this)); //[2011, 2012]\n"
            ],
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 262,
            "description": "A private method that exracts an array of values of all\nthe documents in a timeseries.</br>",
            "itemtype": "method",
            "name": "extractValues",
            "return": {
                "description": "An array of values",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[{a: 18.01, year:'2011'}, {a: 21.07, year:'2012'}]\n    console.log(extractValues.call(this)); //[[18.01], [21.07]]"
            ],
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsinterp.js",
            "line": 298,
            "description": "A private method that learns the values\nof each document of the timeseries.",
            "itemtype": "method",
            "name": "learn",
            "params": [
                {
                    "name": "callback",
                    "description": "An error callback",
                    "type": "Function"
                }
            ],
            "class": "tsinterp",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 10,
            "itemtype": "property",
            "name": "ISO_FORMAT",
            "type": "string",
            "description": "A constant that holds\nthe format of ISO date.",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 19,
            "itemtype": "property",
            "name": "TIMESTAMP_FIELD",
            "type": "string",
            "description": "A constant that holds the name \nof the timestamp field that would be generated \nafter the merge (see merge() and process() functions).",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 29,
            "itemtype": "property",
            "name": "InterpEnum",
            "type": "json",
            "description": "A description of interpolation\nmethods offered by the tsinterp class.",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 38,
            "itemtype": "property",
            "name": "ReduceEnum",
            "type": "json",
            "description": "A description of timeseries size\nreduction methods offered by the tsreduction class.",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 47,
            "itemtype": "property",
            "name": "ReduceFunc",
            "type": "array",
            "description": "An array of timeseries size\nreduction functions.",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 166,
            "description": "A main public method that processes the array of timeseries. It returns (via callback) a one timeseries with timestamp field 'time' in the\nISO format. This timeseries correspond to the fusion of an array of timeseries, and if they are not homogeneous the interpolation would be applyed.\n\n<br/>The processing takes the next steps:\n- if the borders(min and max dates) are specified in the config file, the timeseries would be cut\n- all the dates would be transformed to the ISO string\n- if there are multiple timeseries, and they are not homogeneous, all the timeseries would be interpolated or intersected\n(ie leaving only the documents with dates that are present in all the timeseries)\n- if the are multiple timeseries, they would be fused into one timeseries document by document\n- the output timeseries the timestamp field would be called 'time'\n- finally, if the skip value is defined, the timeseries would undersampled to decrease the size of the timeseries",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.process(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{time:'2011-01-01T00:00:00.000Z', a: 18.11, b: 0},\n    \t\t//\t{time:'2012-01-01T00:00:00.000Z', a: 21.07, b: 26.42},\n    \t\t//\t{time:'2013-01-01T00:00:00.000Z', a: 0, b: 24.11} \n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 260,
            "description": "Public method that returns one timeseries it there is one, on an array\nif trere are many.",
            "itemtype": "method",
            "name": "getTS",
            "return": {
                "description": "One or an array of timeseries",
                "type": "Array"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 282,
            "description": "Public method that returns a timeseries config json.",
            "itemtype": "method",
            "name": "getConfig",
            "return": {
                "description": "Timeseries description",
                "type": "Json"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 293,
            "description": "Public method that returns the current number of timeseries in \nthe tsproc.",
            "itemtype": "method",
            "name": "getNbTS",
            "return": {
                "description": "Number of current timeseries",
                "type": "Int"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 305,
            "description": "Public method that returns the number of documents in the queried timeseries\nIf there is no timeseries specified, return the size of the first one.",
            "itemtype": "method",
            "name": "getTSSize",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The timeseries index",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Size of the timeseries",
                "type": "Int"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 320,
            "description": "Public method that returns the timestamp value (moment.js) of a specified document.",
            "itemtype": "method",
            "name": "getTimestamp",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "doc_index",
                    "description": "The index of the document in the timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "A timestamp",
                "type": "Moment"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 336,
            "description": "Public method that returns the name of timestamp field of specified timeseries.",
            "itemtype": "method",
            "name": "getTimestampField",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "A timestamp field name",
                "type": "String"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 348,
            "description": "Public method that returns the format of timestamp field of specified timeseries.",
            "itemtype": "method",
            "name": "getTimestampFormat",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "A timestamp format",
                "type": "String"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 360,
            "description": "Public method that returns one document from the timeseries.",
            "itemtype": "method",
            "name": "getTimestampField",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "doc_index",
                    "description": "The index of the document in the timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Requested document",
                "type": "Json"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 373,
            "description": "Public method that returns an empty document.\nIt is generated from a normal doucment (specified\nby ts_index and doc_index) by emptying all the fields\nexcept the timestamp\nUsed by tsreductions class.",
            "itemtype": "method",
            "name": "getEmptyDoc",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "doc_index",
                    "description": "The index of the document in the timeseries. Used to",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "A document with empty fields",
                "type": "String"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 400,
            "description": "Public method that takes a timestamp and returns a document from\nthe timeseries that corresponds to it.",
            "itemtype": "method",
            "name": "getDocByTimestamp",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "timestamp",
                    "description": "A string with date in ISO format",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 442,
            "description": "Public method that returns an array of fields present in the specified timeseries (ie in each of it's document).",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "An array of field names",
                "type": "Array"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 462,
            "description": "Public method that returns an average number of timestamps per day.\nThe timeseries should be homogeneous.",
            "itemtype": "method",
            "name": "getAvgPerDay",
            "return": {
                "description": "An average number of timestamps per day",
                "type": "Float"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 494,
            "description": "Public method that returns the date border (the earliest and the oldest timestamp) in \nall the timeseries.",
            "itemtype": "method",
            "name": "getBorders",
            "return": {
                "description": "An array with date (string with ISO format) borders",
                "type": "Array"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 509,
            "description": "Public method that verifies wheather the timeseries is homogeneous.\nIf there is only one timeseries, it is considered homogeneous.\nIf there are many, they are considered homogeneous if every timeseries\nhas the same timestamps in the same order.",
            "itemtype": "method",
            "name": "isHomogeneous",
            "return": {
                "description": "Wheather a bunch of timeseries are homogeneous",
                "type": "Boolean"
            },
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    //homogeneous timeseries\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 0.24, year:'2014'}],\n   \t\t    [{b: 21.42, year:'2012'}, {b: 23.11, year:'2013'}, {b: 0.11, year:'2014'}]\n         ];\n    var tsp = new tsproc(ts, config, null);\n    console.log(tsp.isHomogeneous()); //true\n\n    //non homogeneous timeseries\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 0.24, year:'2014'}],\n   \t\t    [{b: 21.42, year:'2012'}, {b: 23.11, year:'2013'}, {b: 0.11, year:'2014'}]\n         ];\n    var tsp = new tsproc(ts, config, null);\n    console.log(tsp.isHomogeneous()); //false"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 581,
            "description": "Public method that checks wheather the format of the dates in each\ntimeseries is correct.",
            "itemtype": "method",
            "name": "isValid",
            "return": {
                "description": "Wheather the date format is correct",
                "type": "Boolean"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 607,
            "description": "Public method that renames a field in the specified timeseries",
            "itemtype": "method",
            "name": "renameField",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                },
                {
                    "name": "field_name",
                    "description": "A field to rename",
                    "type": "String"
                },
                {
                    "name": "new_name",
                    "description": "A new field name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.renameField(0, 'a', 'new_a', function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{new_a: 18.11, year: '2011'},\n   \t\t\t//\t\t{new_a: 21.07, year: '2012'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012'},\n   \t\t\t//\t\t{b: 24.11, year: '2013'}\n    \t\t//  ]\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 669,
            "description": "Public method that checks wheather the timestamps have ISO format.\nThe method checks only the config json, it does not verify the timestamps\nof all documents.",
            "itemtype": "method",
            "name": "isISO",
            "params": [
                {
                    "name": "ts_index",
                    "description": "The index of timeseries",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Wheather the timestamp have the ISO format",
                "type": "Boolean"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 702,
            "description": "Public method that passes all the timestamps \nto the ISO format (YYYY-MM-DDTHH:mm:ss.SSSSZ).\nThe name of the timestamps is not changed.",
            "itemtype": "method",
            "name": "toISO",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.toISO(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{a: 18.11, year: '2011-01-01T00:00:00.000Z'},\n   \t\t\t//\t\t{a: 21.07, year: '2012-01-01T00:00:00.000Z'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012-01-01T00:00:00.000Z'},\n   \t\t\t//\t\t{b: 24.11, year: '2013-01-01T00:00:00.000Z'}\n    \t\t//  ]\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 770,
            "description": "Public method used to leave in the \ntimeseries only the documents between\ntwo dates specified in the date_borders array",
            "itemtype": "method",
            "name": "cut",
            "params": [
                {
                    "name": "date_borders",
                    "description": "An array of two dates \n(ISO strings)",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 18.11, year:'2011'}, {a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}, {b: 22.11, year:'2014'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.cut(['2012-01-01T00:00:00.000Z', '2013-01-01T00:00:00.000Z'], function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{a: 21.07, year: '2012-01-01T00:00:00.000Z'},\n   \t\t\t//\t\t{a: 23.23, year: '2013-01-01T00:00:00.000Z'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012-01-01T00:00:00.000Z'},\n   \t\t\t//\t\t{b: 24.11, year: '2013-01-01T00:00:00.000Z'}\n    \t\t//  ]\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 843,
            "description": "Public method used to merge two or more timeseries \ninto one timeseries. The timeseries should be homogeneous.\nThe result timeseries would have only one timestamp field \n(it's name is specified by TIMESTAMP_FIELD proprety).",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    tsp.merge(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n   \t\t\t//\t{a: 21.07, b: 26.42, time: '2012'},\n   \t\t\t//\t{a: 23.23, b: 24.11, time: '2013'}\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 924,
            "description": "Public method that is used to reduce the number\nof documents in the timeseries by different\nmethods. Applied only if the timeseries are homogeneous.\nUses a tsreductions module.\nThe reduction mehtods are: \n- skip: choose one document from skipsize documents\n- sum: sum the values of skipsize documents into one\n- avg: average the values of skipsize documents into one\n- max: choose one document from skipsize documents with the maximum value of target_field\n- min: choose one document from skipsize documents with the minimum value of target_field",
            "itemtype": "method",
            "name": "undersample",
            "params": [
                {
                    "name": "type",
                    "description": "An index of ReduceEnum with reduction methods",
                    "type": "Int"
                },
                {
                    "name": "skipsize",
                    "description": "An index of ReduceEnum with reduction methods from ReduceFunc",
                    "type": "Int"
                },
                {
                    "name": "target_field",
                    "description": "A targeted field to calculate the max or min reduction",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 24.24, year:'2014'}, {a: 25.25, year:'2015'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}, {b: 22.11, year:'2014'}, {b: 21.01, year:'2015'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    //simple skip (type = 0)\n    tsp.undersample(0, 2, null, function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{a: 21.07, year: '2012'},\n   \t\t\t//\t\t{a: 24.24, year: '2014'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012'},\n   \t\t\t//\t\t{b: 22.11, year: '2014'}\n    \t\t//  ]\n    \t\t//]\n    });\n\n    //max value of field 'a' (type = 3)\n    tsp.undersample(3, 2, 'a', function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{a: 23.23, year: '2013'},\n   \t\t\t//\t\t{a: 25.25, year: '2015'}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{b: 26.42, year: '2012'},\n   \t\t\t//\t\t{b: 22.11, year: '2014'}\n    \t\t//  ]\n    \t\t//]\n    });"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1009,
            "description": "Public mehtod that could be applied to two or more timeseries\nto interpolate the missing datapoints (document) in relation to \neach other.\nInterpolation methods are: linear, cubic, lanczos, and neares neighbor.\nMethods comparaison could be found <a href=\"http://osuushi.github.io/plotdemo016.html\">here</a>.\nTimestamps should be the ISO strings.\nUses a tsinterp module.",
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "type",
                    "description": "An index of InterpEnum with interpolation methods",
                    "type": "Int"
                },
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 24.24, year:'2014'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}, {b: 21.01, year:'2015'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    //pass to iso timestamps\n    tsp.toISO(null);\n\n    //linear interpolation (type = 0)\n    tsp.interpolate(0, function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', a: 21.07},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', a: 23.23},\n   \t\t\t//\t\t{year: '2014-01-01T00:00:00.000Z', a: 24.24},\n   \t\t\t//\t\t{year: '2015-01-01T00:00:00.000Z', a: 0}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', b: 26.42},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', b: 24.11},\n   \t\t\t//\t\t{year: '2014-01-01T00:00:00.000Z', b: 22.560000000000002}\n   \t\t\t//\t\t{year: '2015-01-01T00:00:00.000Z', b: 21.01}\n    \t\t//  ]\n    \t\t//]\n    });\n\n    //cubic interpolation (type = 1)\n    tsp.interpolate(1, function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', a: 21.07},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', a: 23.23},\n   \t\t\t//\t\t{year: '2014-01-01T00:00:00.000Z', a: 24.24},\n   \t\t\t//\t\t{year: '2015-01-01T00:00:00.000Z', a: 0}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', b: 26.42},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', b: 24.11},\n   \t\t\t//\t\t{year: '2014-01-01T00:00:00.000Z', b: 23.72875}\n   \t\t\t//\t\t{year: '2015-01-01T00:00:00.000Z', b: 21.01}\n    \t\t//  ]\n    \t\t//]\n    });\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1149,
            "description": "Public mehtod that could be applied to two or more timeseries\nto simplify them and leave only the documents that have the same\ntimestamps.\nTimestamps should be the ISO strings.",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 24.24, year:'2014'}],\n   \t\t    [{b: 26.42, year:'2012'}, {b: 24.11, year:'2013'}, {b: 21.01, year:'2015'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    //pass to iso timestamps\n    tsp.toISO(null);\n\n    tsp.intersect(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', a: 21.07},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', a: 23.23}\n    \t\t//  ],\n    \t\t//\t[\n   \t\t\t//\t\t{year: '2012-01-01T00:00:00.000Z', b: 26.42},\n   \t\t\t//\t\t{year: '2013-01-01T00:00:00.000Z', b: 24.11}\n    \t\t//  ]\n    \t\t//]\n    });\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1232,
            "description": "Public method that is used to check the local similarity\nbetween the fields of a timeseries. Does this by caclulating\nthe local correlation.\nSo a timeseries should be merged (ie the function works with \nonly a single one timeseries) and have at least two non-timestamp fields.\n<br/>The similarity is indicated by adding a new field 'correlation' to each document.\nIf value of this field is not 'false', it means that a document is a part \nof range of documents that are strongly correlated.\nThe correlation is considered strong if correalation coef is > 0.6.\n<br/>More info about correlation can be found <a href=\"http://www.statisticshowto.com/what-is-the-correlation-coefficient-formula/\">here</a>.",
            "itemtype": "method",
            "name": "checkSimilarity",
            "params": [
                {
                    "name": "callback",
                    "description": "A callback function",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var tsproc = require('tsproc');\n\n    var config = {}; //config example is in the tsproc method\n\n    var ts = [\n    \t\t[{a: 21.07, year:'2012'}, {a: 23.23, year:'2013'}, {a: 0.24, year:'2014'}, {a: 25.25, year:'2015'}, {a: 25.25, year:'2016'}, {a: 25.25, year:'2017'}],\n   \t\t    [{b: 21.42, year:'2012'}, {b: 23.11, year:'2013'}, {b: 0.11, year:'2014'}, {b: 21.01, year:'2015'}, {b: 4.5, year:'2016'}, {b: 35.2, year:'2017'}]\n         ];\n    \n    var tsp = new tsproc(ts, config, null);\n\n    //we can just merge (without interpolation) the timeseries\n    //because they are homogeneous\n    tsp.merge(null);\n\n    tsp.checkSimilarity(function(err, timeseries){\n\t\n\t   \t\tif (timeseries) console.log(timeseries);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{a: 21.07, b: 21.42, time: '2012', correlation: 0.9998},\n    \t\t//\t{a: 23.23, b: 23.11, time: '2013', correlation: 0.9998},\n    \t\t//\t{a: 0.24, b: 0.11, time: '2014', correlation: 0.9998},\n    \t\t//\t{a: 25.25, b: 21.01, time: '2015', correlation: false},\n    \t\t//\t{a: 25.25, b: 4.5, time: '2016', correlation: false},\n    \t\t//\t{a: 25.25, b: 35.2, time: '2017', correlation: false} \n    \t\t//]\n    \t\t//\n    \t\t// we can conclude that the first three document are strongly correlated\n    });\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1354,
            "description": "Private function that merges the configuration of \nmultiple timeseries into one.\nThe final timestamp name is defined by the \nTIMESTAMP_FIELD propretie.",
            "itemtype": "method",
            "name": "mergeConfigs",
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1391,
            "description": "Private method that returns the minimal (the earliest)\ndate of all the timeseries.",
            "itemtype": "method",
            "name": "getMinDate",
            "return": {
                "description": "A moment.js date",
                "type": "Moment"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1415,
            "description": "Private method that returns the maximal (the oldest)\ndate of all the timeseries.",
            "itemtype": "method",
            "name": "getMaxDate",
            "return": {
                "description": "A moment.js date",
                "type": "Moment"
            },
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1439,
            "description": "Private method that cuts in a single timeseries all the documents\nthat are bellow the specified index.\nIndex is also cut.",
            "itemtype": "method",
            "name": "cutBellow",
            "params": [
                {
                    "name": "ts_index",
                    "description": "An index of a timeseries to cut",
                    "type": "Int"
                },
                {
                    "name": "index",
                    "description": "An index bellow which to cut",
                    "type": "Int"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1452,
            "description": "Private method that cuts in a single timeseries all the documents\nthat are above the specified index.\nIndex is also cut.",
            "itemtype": "method",
            "name": "cutAbove",
            "params": [
                {
                    "name": "ts_index",
                    "description": "An index of a timeseries to cut",
                    "type": "Int"
                },
                {
                    "name": "index",
                    "description": "An index bellow which to cut",
                    "type": "Int"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1465,
            "description": "Private method that cuts in all the \ntimeseries the documents that are earlier \nthan max_date.",
            "itemtype": "method",
            "name": "cutAboveMax",
            "params": [
                {
                    "name": "max_date",
                    "description": "A moment.js date",
                    "type": "Moment"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1518,
            "description": "Private method that cuts in all the \ntimeseries the documents that are older \nthan min_date.",
            "itemtype": "method",
            "name": "cutBellowMin",
            "params": [
                {
                    "name": "min_date",
                    "description": "A moment.js date",
                    "type": "Moment"
                }
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1572,
            "description": "Private method that returns an array\nof all the possible dates of all the timeseries (without duplication).\nThe timestamps of all the timeseries shoud be the ISO strings.\nFinal array of dates is sorted.",
            "itemtype": "method",
            "name": "getAllDates",
            "return": {
                "description": "An array of all possible dates (ISO strings) in all the timeseries",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[[{a: 18.01, year:'2011-01-01T00:00:00.000Z'}, {a: 21.07, year:'2012-01-01T00:00:00.000Z'}], [{b: 21.42, year:'2012-01-01T00:00:00.000Z'}, {b: 23.11, year:'2013-01-01T00:00:00.000Z'}]]\n    console.log(getAllDates.call(this)); //['2011-01-01T00:00:00.000Z', '2012-01-01T00:00:00.000Z', '2013-01-01T00:00:00.000Z']\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1611,
            "description": "Private method that returns an array\nof dates that are included in all the timeseries.\nThe timestamps of all the timeseries shoud be the ISO strings.",
            "itemtype": "method",
            "name": "getSameDates",
            "return": {
                "description": "An array of dates (ISO strings) that are part of all timeseries",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[[{a: 18.01, year:'2011-01-01T00:00:00.000Z'}, {a: 21.07, year:'2012-01-01T00:00:00.000Z'}], [{b: 21.42, year:'2012-01-01T00:00:00.000Z'}, {b: 23.11, year:'2013-01-01T00:00:00.000Z'}]]\n    console.log(getSameDates.call(this)); //['2012-01-01T00:00:00.000Z']\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsproc.js",
            "line": 1642,
            "description": "Private method that returns an array\nof all the dates present in a single timeseries.",
            "itemtype": "method",
            "name": "getTSDates",
            "params": [
                {
                    "name": "ts_index",
                    "description": "An index of a timeseries to extract the dates",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "An array of dates from a specific timeseries",
                "type": "Array"
            },
            "example": [
                "\n\t\n    //[[{a: 18.01, year:'2011-01-01T00:00:00.000Z'}, {a: 21.07, year:'2012-01-01T00:00:00.000Z'}], [{b: 21.42, year:'2012-01-01T00:00:00.000Z'}, {b: 23.11, year:'2013-01-01T00:00:00.000Z'}]]\n    console.log(getTSDates.call(this, 0)); //['2011-01-01T00:00:00.000Z', '2012-01-01T00:00:00.000Z']\n"
            ],
            "class": "tsproc",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 18,
            "description": "Reduction of the timeseries size by choosing one document \n(allways the first one) from the set of documents.",
            "itemtype": "method",
            "name": "reduceSkip",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to choose from",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceSkip.call(this, 5); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 53,
            "description": "Reduction of the timeseries size \nby summing the values of all the\nfields in a set of documents.",
            "itemtype": "method",
            "name": "reduceSum",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to\nbe reduced into one by summing",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceSum.call(this, 5); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 106,
            "description": "Reduction of the timeseries size \nby averaging the values of all the\nfields in a set of documents.",
            "itemtype": "method",
            "name": "reduceAvg",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to\nbe reduced into one by averaging",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceAvg.call(this, 5); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 165,
            "description": "Reduction of the timeseries size by finding the document with\nthe max value of 'target_field' between a set of documents.",
            "itemtype": "method",
            "name": "reduceMax",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to be reduced into one by finding the max",
                    "type": "Int"
                },
                {
                    "name": "target_field",
                    "description": "A field by which all the documents are compared\nto calculate the max",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceMax.call(this, 5, 'temp'); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        },
        {
            "file": "lib/tsreductions.js",
            "line": 217,
            "description": "Reduction of the timeseries size by finding the document with\nthe min value of 'target_field' between a set of documents.",
            "itemtype": "method",
            "name": "reduceMin",
            "params": [
                {
                    "name": "skipsize",
                    "description": "A number of documents to be reduced into one by finding the min",
                    "type": "Int"
                },
                {
                    "name": "target_field",
                    "description": "A field by which all the documents are compared\nto calculate the min",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Size reduced timeseries",
                "type": "Timeseries"
            },
            "example": [
                "\n    var reduced_timseries = reduceMin.call(this, 5, 'temp'); //calling from tsproc"
            ],
            "class": "tsreductions",
            "module": "tsproc"
        }
    ],
    "warnings": []
}